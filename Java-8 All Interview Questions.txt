Java-8 All Interview Questions:
==============================


public class InfyEmployees {
	
	private int eid;
	
	private String name;
	
	private double salary;
	
	private int age;
	
	private String gender;
	
	private String department;
	
	private int yearOfJoining;

          //setters/getters
          //constructors
          //ToString
}



public static void main(String[] args) {

		List<InfyEmployees> empData = new ArrayList<>();

		empData.add(new InfyEmployees(1, "Raju", 74000, 30, "male", "javadeveloper", 2022));
		empData.add(new InfyEmployees(2, "Shiva", 44000, 12, "male", "student", 2008));
		empData.add(new InfyEmployees(5, "Saikumar", 84000, 32, "male", "javadeveloper", 2022));
		empData.add(new InfyEmployees(1, "Rafi", 54000, 40, "male", "SQLDeveloper", 2022));
		empData.add(new InfyEmployees(1, "Srinivas", 84000, 31, "male", "UIDeveloper", 2022));
		empData.add(new InfyEmployees(1, "Raju", 74000, 30, "male", "javadeveloper", 2022));
		empData.add(new InfyEmployees(1, "Chetan", 74000, 30, "male", "UIDeveloper", 2022));

		empData.add(new InfyEmployees(1, "Saha", 84000, 31, "Female", "UIDeveloper", 2018));
		empData.add(new InfyEmployees(1, "Manasa", 64000, 30, "Female", "Salesforce", 2017));
		empData.add(new InfyEmployees(1, "Divya", 74000, 30, "Female", "Devoops", 2023));
		
		

	}

}
==============
InfosysProject:
==============

1).How many male and female employees are there in the Organizations? (count)

Map<String, Long> collect = empData.stream().collect(Collectors.groupingBy(InfyEmployees::getGender,Collectors.counting()));
//Map<String, Long> collect = empData.stream().collect(Collectors.groupingBy(InfyEmployees::getDepartment,Collectors.counting()));
System.out.println(collect);


2).Print the names of all the departments in the organization?

                  empData.stream()
		         .map(e->e.getDepartment()).distinct()
		         .forEach(names->System.out.println(names));


3).How to get the avg age of male and female employees?

Map<String, Double> collect =               empData.stream().collect(Collectors.groupingBy(InfyEmployees::getGender,Collectors.averagingInt(InfyEmployees::getAge)));
		System.out.println(collect);


4).Hiegest  paid employee in the organization?

        Optional<InfyEmployees> collect = empData.stream().collect(Collectors.maxBy(Comparator.comparing(InfyEmployees::getSalary)));
		
		if(collect.isPresent()) {
		System.out.println(collect.get().getSalary());


5).Get the names of all th employees who have joined after 2020?

empData.stream().filter(emp->emp.getYearOfJoining()>2022).map(emp->emp.getName())
		.forEach(names->System.out.println(names));


6).Count the number of employees each department?

Map<String, Long> collect = empData.stream().collect(Collectors.groupingBy(InfyEmployees::getDepartment,Collectors.counting()));
		System.out.println(collect);

7).Avg sal from each department?
                 Map<String, Double> collect = empData.stream()
		.collect(Collectors.groupingBy(InfyEmployees::getDepartment,Collectors.averagingDouble(InfyEmployees::getSalary)));
		System.out.println(collect);


8).Youguest female employee in the Ui developer department?

Optional<InfyEmployees> min = empData.stream()
				.filter(e -> e.getGender().equals("Female") && e.getDepartment().equals("UIDeveloper"))
				.max(Comparator.comparing(InfyEmployees::getAge));

		System.out.println(min);


9).Who has the most working exp in the organization?

Optional<InfyEmployees> collect = empData.stream()
				.collect(Collectors.minBy(Comparator.comparing(InfyEmployees::getYearOfJoining)));
                                 System.out.println(collect);



10).How many mala and female emps are in the javadeveloper?

Map<String, Long> collect = empData.stream()
		.filter(e->e.getDepartment().equals("javadeveloper"))
		.collect(Collectors.groupingBy(InfyEmployees::getGender,Collectors.counting()));
		System.out.println(collect);


========================================================================================================================================================

!).WAP print names and count using streams? starts with "r"

public class Stream1 {
	public static void main(String[] args) {

		List<String> asList = Arrays.asList("raju", "kumar", "rakesh", "saikumar");

		asList.stream()
		.filter(name -> name.startsWith("r"))
		.map(name -> name + "=" + name.length())
	        .forEach(n -> System.out.println(n));

	}

}

OUTPUT:

raju=4
rakesh=6


2).Print emp name and emp age whose salary is >=50000 using stream API?

public class Employee {
	public static void main(String[] args) {

		Testing t1=new Testing(12, "raju", 1200.00);
		Testing t2=new Testing(14, "sai", 43200.00);
		Testing t3=new Testing(23, "kumar", 54200.00);
		Testing t4=new Testing(32, "rakesh", 3400.00);
		Testing t5=new Testing(43, "nani", 25200.00);
		
		List<Testing> data = Arrays.asList(t1,t2,t3,t4,t5);
		
		data.stream().filter(sal->sal.getSalary()>30000)
		.map(sal->sal.getName()+"="+sal.getId()).forEach(n->System.out.println(n));
		
		
		//.forEach(sal->System.out.println(sal.getName()+"="+sal.getId()));

	}
}

OUTPUT:

sai=14
kumar=23



FLATMAP : Flatmap is used to deal with subCollection. A collection inside onther collection.means nested collection.make stream as a simple 
=======
           It is used to flaten list of streams into single stream.

MAP:  MAP is used to transfering the data available in the stream.
===


public class Flatmapexample {

	public static void main(String[] args) {
		
		List<String> frontEnd = Arrays.asList("HTMl","Javascript","Angular","ReactJs");
		
		List<String> backEnd = Arrays.asList("java","springboot","microservice","Advancedjava");
		
		List<List<String>> asList = Arrays.asList(frontEnd,backEnd);
		
		asList.stream().flatMap(data->data.stream()).forEach(names->System.out.println(names));
		

	}

OUTPUT:

HTMl
Javascript
Angular
ReactJs
java
springboot
microservice
Advancedjava



Slicing Operations with streams:  (this will perform operations Returning the streams so we can call Intermediate Operations).
===============================

Distinct:To get the unique elements in the stream. 

Limit(long maxSixe) :Get list of the elements from the stream based on the size.

Skip:it is used to skip given numer of elemets from the starting position of stream.



public class Flatmapexample {

	public static void main(String[] args) {
		
		List<String> coures = Arrays.asList("HTMl","Javascript","Angular","ReactJs","java","spring");
		
		coures.stream().limit(2).forEach(data->System.out.println(data));
                //HTMl  Javascript  (first elements
		
		coures.stream().skip(2).forEach(data->System.out.println(data));
		//Angular ReactJs java spring
		
		coures.stream().distinct().forEach(data->System.out.println(data));   (Non-duplicates print)
		

}}


MATCHING OPERATIONS In JAVA:( Terminal Operation) thay will opearions and return result directly).
============================

1).anymatch  => Atlist one record match than return True or false (taking predicate as argument)
2).allMatch  => All need to match
3).noneMatch => not much any contion return true.


public class Employee {
	public static void main(String[] args) {

		Testing t1=new Testing(12, "raju", 1200.00);
		Testing t2=new Testing(14, "sai", 43200.00);
		Testing t3=new Testing(23, "kumar", 54200.00);
		Testing t4=new Testing(32, "rakesh", 3400.00);
		Testing t5=new Testing(43, "nani", 25200.00);
		
		List<Testing> data = Arrays.asList(t1,t2,t3,t4,t5);
		
		
		//Any name is or || any one from india
		
		boolean anyMatch = data.stream().anyMatch(name->name.getName().equals("raju"));
		System.out.println(anyMatch);
		
		boolean anyMatch1 = data.stream().allMatch(name->name.getName().equals("raju"));
		System.out.println(anyMatch1);
}
}

OUTPUT:

true
false


*).get who names is raju get the total record?



		Optional<Testing> findFirst = data.stream().filter(name->name.getName().equals("raju")).findFirst();
		
		if(findFirst.isPresent()) {
			System.out.println(findFirst.get());
		}


Diff forEach and collect?
========================
 
forEach() is printing the data.
 collect() If you want collect data from stream than we shoud go for collect method.


More than one availabe than we go for collect.

 List<Testing> collect = data.stream().filter(name->name.getName().equals("raju")).collect(Collectors.toList());
		
		System.out.println(collect);













